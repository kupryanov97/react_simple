{"version":3,"sources":["styles/icons/delete.svg","styles/icons/save.svg","styles/icons/edit.svg","components/note/Note.jsx","components/note-item/NoteItem.jsx","components/search/Search.jsx","components/button-add/BtnAdd.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Note","props","changeTitle","bind","changeText","edit","delete","modedit","state","title","text","editing","this","setState","onUpdate","index","onRemove","e","target","value","className","type","onChange","onClick","src","icons","alt","save","name","rows","renderNoteOrEdit","Component","NoteItem","class","updateData","active","Search","search","placeholder","toLowerCase","filter","notes","note","includes","BtnAdd","newNote","App","saveNote","removeNote","updateNote","require","localStorage","getItem","initialData","JSON","parse","concat","setItem","stringify","splice","list","map","obj","i","key","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6f1d8b59.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/delete.dd4761f3.svg\";","module.exports = __webpack_public_path__ + \"static/media/save.3dd444f2.svg\";","module.exports = __webpack_public_path__ + \"static/media/edit.781a3feb.svg\";","import React, {Component} from 'react';\nimport IconBtn from '../icon-btn/IconBtn';\n\nclass Note extends Component{\n    constructor(props){\n        super(props);\n        this.changeTitle = this.changeTitle.bind(this);\n        this.changeText = this.changeText.bind(this);\n        \n        this.edit = this.edit.bind(this);\n        this.delete = this.delete.bind(this); \n        this.modedit=this.modedit.bind(this);\n        \n        this.state = {\n            title: this.props.title,\n            text: this.props.text,\n            editing: false}; \n    }\n\n    edit() { \n        this.setState({title: this.props.title, text: this.props.text});\n        this.props.onUpdate(this.props.index, this.state.title, this.state.text);\n        this.setState({editing: false});\n      }\n\n    modedit(){\n        this.setState({title: this.props.title, text: this.props.text});\n        this.setState({editing: true});\n    }\n    \n    \n\n    delete() {\n        this.props.onRemove(this.props.index);\n    }\n\n    changeTitle(e) {\n        this.setState({title: e.target.value});\n      }\n      \n    changeText(e) {\n        this.setState({text: e.target.value});\n      }\n\n    renderNoteOrEdit() { \n        if(this.state.editing) {\n          return (\n                <form>\n                <div className=\"note\">   \n                    <div className=\"note__top\">\n                        \n                        <input  type=\"text\" className=\"note__input\" value={this.state.title} onChange={this.changeTitle} />  \n                        \n                        <div className = \"note__top__btn\">\n                            <button type=\"button\" className=\"note__btn\" onClick={this.delete}><img className=\"note__btn__icon\" src= {this.props.icons.delete} alt=''/></button>  \n                            <button type=\"button\" className=\"note__btn\" onClick={this.edit}><img className=\"note__btn__icon\" src= {this.props.icons.save} alt=''/></button>\n                        </div>  \n                        \n                         \n                    </div>\n                              \n                                        \n                    <div className=\"note__textarea\">\n                        <textarea  name=\"text\" value={this.state.text} onChange={this.changeText} className=\"form-control\" rows=\"4\"/>\n                    </div>\n              \n                 </div>\n                 </form>)\n        } else {\n           return (<div className=\"note\">\n                        <div className=\"note__top\">\n                            <div className=\"note__title\">\n                                    <h2>{this.props.title}</h2>\n                            </div>\n                            <div className = \"note__top__btn\">\n                                <button type=\"button\" className=\"note__btn\" onClick={this.delete}><img className=\"note__btn__icon\" src= {this.props.icons.delete} alt=''/></button>\n                                <button type=\"button\" className=\"note__btn\" onClick={this.modedit}><img className=\"note__btn__icon\" src= {this.props.icons.edit} alt=''/></button>\n                            </div>\n                            \n                        </div>\n                        <div className=\"note__text\"> \n                            <span>{this.props.text}</span>\n                        </div>\n                   </div>)\n        }\n      }\n      render() { \n        return ( <div>\n                    {this.renderNoteOrEdit()}\n                </div>\n                 \n        )\n      }\n    \n}\n\nexport default Note;","import React, {Component} from 'react';\n\nclass NoteItem extends Component{\n    constructor(props){\n        super(props);\n        this.state={\n            title: this.props.title,\n            text: this.props.text,\n            index: this.props.index\n        }\n    }\n\n    render(){\n        return(\n            <div className={this.props.class}>\n            <div className='note-item' onClick={() => {this.props.updateData({active: this.state.index})}}>\n                <div className='note-item__title'>\n                    <span>{this.props.title}</span>\n                </div>\n\n                <div className='note-item__text'>\n                    <span>{this.props.text}</span>\n                </div>\n            </div>\n            </div>\n        )\n    }\n}\n\nexport default NoteItem;","import React from 'react';\n\nconst Search= (props)=>{\n\n    const dataSearch= e =>{\n        const value = e.target.value.toLowerCase();\n        const filter=props.notes.filter(note =>{\n            return note.title.toLowerCase().includes(value);\n        });\n\n        props.updateData({\n            active:0,\n            notes:filter,\n            search:value,\n        }\n        )\n    };\n    return(\n        <div className='search'>\n            <input\n                className='search__input'\n                type=\"text\"\n                value={props.search}\n                placeholder=\"Поиск...\"\n                onChange={dataSearch}\n\n            />\n        </div>\n    )\n}\n\nexport default Search;","import React from 'react';\n\nconst BtnAdd= (props) => {\n    return(\n        \n        <button type=\"button\" className=\"btn\" onClick={ ()=> {props.newNote('Новая заметка','') }}>+Заметка</button>)\n}\n\nexport default BtnAdd;","import React, {Component} from 'react';\nimport './App.css';\nimport Note from './components/note/Note';\nimport NoteItem from './components/note-item/NoteItem';\nimport Search from './components/search/Search';\nimport BtnAdd from './components/button-add/BtnAdd';\n\n\n\nclass App extends Component {\n  constructor(props) {\n      super(props);\n      this.newNote = this.newNote.bind(this); \n      this.saveNote = this.saveNote.bind(this); \n      this.removeNote = this.removeNote.bind(this); \n      this.updateNote = this.updateNote.bind(this); \n      this.updateData=this.updateData.bind(this);\n      \n      this.state = {\n        notes:[],\n        active:0,\n        search:'',\n        icons:{\n        delete:require('./styles/icons/delete.svg'),\n        save: require('./styles/icons/save.svg'),\n        edit: require('./styles/icons/edit.svg'),\n      }\n    \n      };\n     \n    }\n\n  componentDidMount() {\n      let notes = localStorage.getItem(\"notes\");\n      this.initialData=JSON.parse(notes);\n        if (notes)\n           this.setState({notes: this.initialData});\n    } \n  \n  updateData(value) {\n      this.setState(value);\n    }\n\n  newNote(title, text) { \n      let notes = [{title: title, text: text}].concat(this.state.notes);   \n      this.saveNote(notes);\n      this.setState({active: 0});\n    } \n    \n  saveNote(notes) {\n      localStorage.setItem('notes', JSON.stringify(notes)); \n      this.setState({notes: notes});\n    } \n  \n  removeNote(index) {\n      let notes = this.state.notes;\n      notes.splice(index, 1);\n      this.saveNote(notes);\n    }\n    \n  updateNote(index, title, text) {\n\n      let notes = this.state.notes;\n      notes[index].title = title;\n      notes[index].text = text;\n      this.saveNote(notes);\n    }\n\n    render() { \n       \n      let list=this.state.notes.map((obj, i) =>  \n        { if (i===this.state.active)\n          return <NoteItem  class=\"active\" key={i} index={i} title={obj.title} text={obj.text} updateData={this.updateData}/>\n        else \n          return <NoteItem class=\"\" key={i} index={i} title={obj.title} text={obj.text} updateData={this.updateData}/>  }  \n      );\n      \n      \n      let note;\n\n      for (var i=0; i<this.state.notes.length;i++){ //кирпич\n\n        if (i===this.state.active)\n           note = <Note key={i} index={i} active={this.state.active} notes={this.state.notes} title={this.state.notes[i].title} text={this.state.notes[i].text } onUpdate={this.updateNote} onRemove={this.removeNote} icons={this.state.icons}/>\n      }\n\n      \n    \n      \n      //конец кирпича\n       \n       return ( <div className=\"App\">\n           \n                 <header className=\"header\">\n                   <h1 className=\"header__titl\">Заметки</h1>\n                 </header>\n\n                 \n                 \n                 <div className=\"container\">\n                  <div className=\"container__left\">\n                    <BtnAdd newNote={this.newNote} updateData={this.updateData} />\n\n                    <Search search={this.state.search} notes={this.initialData} updateData={this.updateData}/>\n                    {list}\n                  </div>\n                    \n                  <div className=\"container__right\">\n                    \n                      {note}\n                    \n                  </div>\n\n                 </div>\n\n                 </div>     \n\n                 \n       )\n     }\n  \n \n    }\n \n  \n\n  export default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}